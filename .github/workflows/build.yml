name: CMake Build & Test

on:
  push:
  pull_request:

jobs:
  build:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python (for Conan)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Conan
        run: pip install conan

      - name: Detect Conan profile
        run: conan profile detect --force

      - name: Install dependencies (Conan + CMakeToolchain)
        run: conan install . --output-folder=build --build=missing -g CMakeToolchain

      - name: List build folder (debug)
        run: |
          echo "Files in build:"
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            dir build
          else
            ls -l build
          fi

      - name: Configure CMake
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake -G "Visual Studio 17 2022"
          else
            cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake
          fi

      - name: Build
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cmake --build build --config Debug
          else
            cmake --build build
          fi

      - name: Run tests
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            ctest --test-dir build --output-on-failure -C Debug
          else
            ctest --test-dir build --output-on-failure
          fi

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: 8051-simulator-${{ matrix.os }}
          path: |
            build/Debug/*
            build/*.exe
            build/*.out
            build/*.dll
            build/*.so