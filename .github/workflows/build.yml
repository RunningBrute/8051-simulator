name: CMake Build & Test

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Python (do Conana)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 3. Install Conan
      - name: Install Conan
        run: pip install conan

      # 4. Detect profile i utw√≥rz toolchain
      - name: Conan install
        run: |
          conan profile detect --force
          conan install . --install-folder=build --build=missing

      # 5. Configure CMake
      - name: Configure CMake
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cmake -S . -B build -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake
          else
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake
          fi

      # 6. Build
      - name: Build
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cmake --build build --config Debug
          else
            cmake --build build
          fi

      # 7. Run tests
      - name: Run tests
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ctest --test-dir build --config Debug --output-on-failure
          else
            ctest --test-dir build --output-on-failure
          fi
        shell: bash

      # 8. Upload artifacts (opcjonalnie)
      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: 8051-simulator-${{ matrix.os }}
          path: |
            build/Debug/*
            build/*.exe
            build/*.out
            build/*.dll
            build/*.so