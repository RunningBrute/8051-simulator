name: Build & Test (CMake + Conan + Catch2)

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python (for Conan)
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Conan
        run: |
          pip install conan
          conan --version

      - name: Detect Conan profile
        run: conan profile detect --force

      - name: Install dependencies (Conan)
        run: |
          conan install . --build=missing --output-folder=build
          echo "Contents of build folder after Conan:"
          ls -l build || dir build

      - name: Configure CMake
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake -G "Visual Studio 17 2022"
          else
            cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake
          fi
        shell: bash

      - name: Build
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cmake --build build --config Debug
          else
            cmake --build build
          fi
        shell: bash

      - name: Run tests
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ctest --test-dir build -C Debug --output-on-failure
          else
            ctest --test-dir build --output-on-failure
          fi
        shell: bash

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: 8051-simulator-${{ matrix.os }}
          path: |
            build/**/*.exe
            build/**/*.dll
            build/**/*.out
            build/**/*.so